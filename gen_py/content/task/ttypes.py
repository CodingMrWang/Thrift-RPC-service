#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import base.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Task:
  """
  Attributes:
   - app_psm
   - app_task_type
   - app_task_id
   - task_id
   - status
   - next_run_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'app_psm', None, None, ), # 1
    (2, TType.I16, 'app_task_type', None, None, ), # 2
    (3, TType.STRING, 'app_task_id', None, None, ), # 3
    (4, TType.STRING, 'task_id', None, None, ), # 4
    (5, TType.I16, 'status', None, None, ), # 5
    (6, TType.STRING, 'next_run_time', None, None, ), # 6
  )

  def __init__(self, app_psm=None, app_task_type=None, app_task_id=None, task_id=None, status=None, next_run_time=None,):
    self.app_psm = app_psm
    self.app_task_type = app_task_type
    self.app_task_id = app_task_id
    self.task_id = task_id
    self.status = status
    self.next_run_time = next_run_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.app_psm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.app_task_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.app_task_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.task_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.next_run_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Task')
    if self.app_psm is not None:
      oprot.writeFieldBegin('app_psm', TType.STRING, 1)
      oprot.writeString(self.app_psm)
      oprot.writeFieldEnd()
    if self.app_task_type is not None:
      oprot.writeFieldBegin('app_task_type', TType.I16, 2)
      oprot.writeI16(self.app_task_type)
      oprot.writeFieldEnd()
    if self.app_task_id is not None:
      oprot.writeFieldBegin('app_task_id', TType.STRING, 3)
      oprot.writeString(self.app_task_id)
      oprot.writeFieldEnd()
    if self.task_id is not None:
      oprot.writeFieldBegin('task_id', TType.STRING, 4)
      oprot.writeString(self.task_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 5)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.next_run_time is not None:
      oprot.writeFieldBegin('next_run_time', TType.STRING, 6)
      oprot.writeString(self.next_run_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.next_run_time is None:
      raise TProtocol.TProtocolException(message='Required field next_run_time is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.app_psm)
    value = (value * 31) ^ hash(self.app_task_type)
    value = (value * 31) ^ hash(self.app_task_id)
    value = (value * 31) ^ hash(self.task_id)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.next_run_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
